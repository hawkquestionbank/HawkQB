
<style>
    rect.bordered {
      stroke: #E6E6E6;
      stroke-width:2px;
    }

    text.mono {
      font-size: 9pt;
      font-family: Consolas, courier;
      fill: #aaa;
    }

    text.axis-workweek {
      fill: #000;
    }

    text.axis-worktime {
      fill: #000;
    }
</style>
<script src="https://d3js.org/d3.v3.js"></script>

<div id="chart"></div>
<div id="dataset-picker">
</div>
<script type="text/javascript">
      var margin = { top: 50, right: 0, bottom: 100, left: 100 },
          buckets = 9,
          colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
          microCredentials = '<%= @micro_credentials %>'.split(' '),
	  height = 50 * microCredentials.length,
          students = '<%= @students %>'.split(' '),
          width = 50 * students.length ,
          gridSize = Math.floor(width / students.length),
          legendElementWidth = 80,
          dataset = '<%= @heatmap_tsv %>';

      var svg = d3.select("#chart").append("svg")
          .attr("width", Math.max(width + margin.left + margin.right, 1000))
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      var dayLabels = svg.selectAll(".dayLabel")
          .data(microCredentials)
          .enter().append("text")
            .text(function (d) { return d; })
            .attr("x", 0)
            .attr("y", function (d, i) { return i * gridSize; })
            .style("text-anchor", "end")
            .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
            .attr("class", function (d, i) { return "dayLabel mono axis axis-workweek"; });

      var timeLabels = svg.selectAll(".timeLabel")
          .data(students)
          .enter().append("text")
            .text(function(d) { return d; })
            .attr("x", function(d, i) { return i * gridSize; })
            .attr("y", 0)
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + gridSize / 2 + ", -6)")
            .attr("class", function(d, i) { return "timeLabel mono axis axis-worktime"; });

      var heatmapChart = function(tsvFile) {
        d3.tsv(tsvFile,
        function(d) {
          console.log("===================")
          return {
            micro_credential: +d.MC,
            student: +d.student,
            value: +d.value
          };
        },
        function(error, data) {
          var colorScale = d3.scale.quantile()
              .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
              .range(colors);

          var cards = svg.selectAll(".student")
              .data(data, function(d) {return d.micro_credential+':'+d.student;});

          cards.append("title");

          cards.enter().append("rect")
              .attr("x", function(d) { return (d.student - 1) * gridSize; })
              .attr("y", function(d) { return (d.micro_credential - 1) * gridSize; })
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("class", "hour bordered")
              .attr("width", gridSize)
              .attr("height", gridSize)
              .style("fill", colors[0]);

          cards.transition().duration(1000)
              .style("fill", function(d) { return colorScale(d.value); });

          cards.select("title").text(function(d) { return d.value; });

          cards.exit().remove();

          var legend = svg.selectAll(".legend")
              .data([0].concat(colorScale.quantiles()), function(d) { return d; });

          legend.enter().append("g")
              .attr("class", "legend");

          legend.append("rect")
            .attr("x", function(d, i) { return legendElementWidth * i; })
            .attr("y", height)
            .attr("width", legendElementWidth)
            .attr("height", gridSize / 2)
            .style("fill", function(d, i) { return colors[i]; });

          legend.append("text")
            .attr("class", "mono")
            .text(function(d) { return "â‰¥ " + Math.round(d); })
            .attr("x", function(d, i) { return legendElementWidth * i; })
            .attr("y", height + gridSize);

          legend.exit().remove();

        });
      };

      heatmapChart(dataset);
</script>
